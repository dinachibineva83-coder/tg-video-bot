import asyncio
import logging
import os
import re
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")

VIDEO_SETS = {
    "free": [
        "https://filesamples.com/samples/video/mp4/sample_640x360.mp4"
    ],
    "course1": [
        # —Å—é–¥–∏ –≤—Å—Ç–∞–≤–∏—à file_id —Å–≤–æ—ó—Ö –≤—ñ–¥–µ–æ
    ]
}

WELCOME_TEXT = (
    "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –Ω–∞–¥—ñ—à–ª—é —Ç–æ–±—ñ –≤—ñ–¥–µ–æ–º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.\n"
    "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—Ä–∏–π—à–ª–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ /help."
)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def send_video_safely(chat_id: int, ref: str):
    try:
        is_probable_file_id = bool(re.match(r"^[A-Za-z0-9\-_]{20,}$", ref))
        is_url = ref.startswith("http://") or ref.startswith("https://")
        if is_probable_file_id and not is_url:
            await bot.send_video(chat_id, video=ref)
        elif is_url:
            await bot.send_video(chat_id, video=ref)
        else:
            await bot.send_video(chat_id, video=FSInputFile(ref))
    except Exception as e:
        await bot.send_message(chat_id, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ: {e}")

async def send_set(chat_id: int, key: str):
    videos = VIDEO_SETS.get(key)
    if not videos:
        await bot.send_message(chat_id, "–ù–∞–±—ñ—Ä –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π /help.")
        return
    await bot.send_message(chat_id, f"–ù–∞–¥—Å–∏–ª–∞—é –Ω–∞–±—ñ—Ä –≤—ñ–¥–µ–æ: *{key}*", parse_mode="Markdown")
    for ref in videos:
        await send_video_safely(chat_id, ref)

@dp.message(CommandStart(deep_link=True))
async def start_deeplink(message: Message):
    parts = message.text.split(maxsplit=1)
    key = parts[1].strip() if len(parts) > 1 else ""
    await message.answer(WELCOME_TEXT)
    await send_set(message.chat.id, key or "free")

@dp.message(CommandStart())
async def start_plain(message: Message):
    await message.answer(WELCOME_TEXT)
    await send_set(message.chat.id, "free")

@dp.message(Command("help"))
async def help_cmd(message: Message):
    keys = ", ".join(VIDEO_SETS.keys())
    txt = (
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–±—ñ—Ä –≤—ñ–¥–µ–æ, –∑–∞—Ö–æ–¥—å –∑–∞ –ª—ñ–Ω–∫–æ–º:\n"
        "`https://t.me/<–¢–≤—ñ–π–Æ–∑–µ—Ä–Ω–µ–π–º–ë–æ—Ç–∞>?start=<–∫–ª—é—á>`\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–ª—é—á—ñ: `{keys}`"
    )
    await message.answer(txt, parse_mode="Markdown")

@dp.message(Command("getfileid"))
async def get_file_id(message: Message):
    if not message.reply_to_message or not message.reply_to_message.video:
        await message.answer("–ù–∞–¥—ñ—à–ª–∏ /getfileid *—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å* –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–µ–æ.", parse_mode="Markdown")
        return
    await message.answer(f"`{message.reply_to_message.video.file_id}`", parse_mode="Markdown")

async def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ BOT_TOKEN. –î–æ–¥–∞–π –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Render.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
