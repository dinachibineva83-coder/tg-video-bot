import asyncio
import logging
import os
import sqlite3
from datetime import datetime, timedelta, timezone

from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

# ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==========
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –ü—É–±–ª—ñ—á–Ω–∏–π URL —Å–µ—Ä–≤—ñ—Å—É –Ω–∞ Render:
# —Å–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ RENDER_EXTERNAL_URL; —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π PUBLIC_URL
PUBLIC_URL = (os.getenv("RENDER_EXTERNAL_URL") or os.getenv("PUBLIC_URL") or "").rstrip("/")

# –¢–≤—ñ–π –≤—ñ—Ç–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
WELCOME_TEXT = (
    "–í—ñ—Ç–∞—é! üëã –Ø –ù–∞—Ç–∞–ª—ñ—è –ö–µ—Ä–Ω–∏—Ü—å–∫–∞, —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –∫—É—Ä—Å—ñ–≤ –º–∞–Ω—ñ–∫—é—Ä—É.\n"
    "–ù–∏–∂—á–µ –Ω–∞–¥—ñ—à–ª—é —Ç–æ–±—ñ –≤—ñ–¥–µ–æ–º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—å —ó—Ö, "
    "—â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—ñ."
)

# -------- –ù–∞–ª–∞—à—Ç–æ–≤—É–≤–∞–Ω–∞ —Å–µ—Ä—ñ—è –Ω–∞ 3 –¥–Ω—ñ --------
# –î–µ–Ω—å 1 ‚Äî –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è Start, –î–µ–Ω—å 2 ‚Äî —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å, –î–µ–Ω—å 3 ‚Äî —á–µ—Ä–µ–∑ 2 –¥–Ω—ñ
SERIES_KEY_DEFAULT = "free"
SERIES = {
    "free": [
        # –î–µ–Ω—å 1
        "BAACAgIAAxkBAAMKaLwqrgsdVndDd_IJv-89xCL-zWgAAup4AAIKEuFJlD2robhaSKI2BA",
        # –î–µ–Ω—å 2
        "BAACAgIAAxkBAAMFaLwnYcxRR03m9z3G8F8WKgdFM00AAsyHAALzatlJw8SHG-Y_jQk2BA",
        # –î–µ–Ω—å 3 ‚Äî —è–∫—â–æ –∑–∞—Ö–æ—á–µ—à, –¥–æ–¥–∞–π —â–µ –æ–¥–∏–Ω file_id —Å—é–¥–∏:
        # BAACAgIAAxkBAAMhaL1yyP2oXCK6d81EYCmeNI_vP9MAAiKCAAIKEvFJL_Sa9_O1i4I2BA",
    ]
}
SEND_HOUR_KYIV = 10  # –æ –∫–æ—Ç—Ä—ñ–π –≥–æ–¥–∏–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –≤—ñ–¥–µ–æ (–∑–∞ –ö–∏—î–≤–æ–º)

# ========== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ==========
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–ª—è –¥—Ä—ñ–ø-—Å–µ—Ä—ñ—ó (–¥—É–∂–µ –ø—Ä–æ—Å—Ç–∞):
# –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ —ñ –∫–æ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
DB = "drip.sqlite3"

def db_init():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS drip (
        user_id INTEGER NOT NULL,
        series_key TEXT NOT NULL,
        next_index INTEGER NOT NULL,
        run_at_utc TEXT NOT NULL,
        PRIMARY KEY (user_id, series_key)
    )
    """)
    conn.commit()
    conn.close()

def db_upsert(user_id: int, series_key: str, next_index: int, run_at_utc: datetime):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("""
    INSERT INTO drip(user_id, series_key, next_index, run_at_utc)
    VALUES (?, ?, ?, ?)
    ON CONFLICT(user_id, series_key) DO UPDATE SET
        next_index=excluded.next_index,
        run_at_utc=excluded.run_at_utc
    """, (user_id, series_key, next_index, run_at_utc.isoformat()))
    conn.commit()
    conn.close()

def db_delete(user_id: int, series_key: str):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("DELETE FROM drip WHERE user_id=? AND series_key=?", (user_id, series_key))
    conn.commit()
    conn.close()

def db_due(now_utc: datetime):
    """–£—Å—ñ –∑–∞–ø–∏—Å–∏, –≤ —è–∫–∏—Ö —á–∞—Å –Ω–∞—Å—Ç–∞–≤."""
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    rows = c.execute("SELECT user_id, series_key, next_index, run_at_utc FROM drip").fetchall()
    conn.close()
    due = []
    for user_id, series_key, next_index, run_at_iso in rows:
        try:
            run_at = datetime.fromisoformat(run_at_iso)
        except Exception:
            run_at = now_utc
        if run_at <= now_utc:
            due.append((user_id, series_key, next_index))
    return due

# ========== –î–û–ü–û–ú–Ü–ñ–ù–ï ==========
def kyiv_midnight_plus(hour: int, days_ahead: int = 1) -> datetime:
    """–ü–æ–≤–µ—Ä—Ç–∞—î datetime (UTC) –Ω–∞ –∑–∞–≤—Ç—Ä–∞/–ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞ –æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ–π –≥–æ–¥–∏–Ω—ñ –ö–∏—î–≤–∞."""
    # –ö–∏—ó–≤ –∑–∞—Ä–∞–∑ UTC+3 (Europe/Kyiv —É –≤–µ—Ä–µ—Å–Ω—ñ 2025 ‚Üí UTC+3).
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –≤—ñ–∑—å–º–µ–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –∑—Å—É–≤ +3. –Ø–∫—â–æ –±—É–¥–µ —ñ–Ω—à–∏–π —Å–µ–∑–æ–Ω ‚Äî –º–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –∑–º—ñ–Ω–Ω—É.
    KYIV_OFFSET = 3
    now_utc = datetime.now(timezone.utc)
    # —Ü—ñ–ª—å–æ–≤–∞ –¥–∞—Ç–∞ —É –ö–∏—î–≤—ñ
    kyiv_now = now_utc + timedelta(hours=KYIV_OFFSET)
    kyiv_target = (kyiv_now.replace(hour=hour, minute=0, second=0, microsecond=0)
                   + timedelta(days=days_ahead))
    # –Ω–∞–∑–∞–¥ –≤ UTC
    return kyiv_target - timedelta(hours=KYIV_OFFSET)

async def send_video(user_id: int, file_id: str):
    try:
        await bot.send_video(user_id, file_id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ {file_id} ‚Üí user {user_id}: {e}")

async def schedule_next(user_id: int, series_key: str, next_index: int, days_ahead: int):
    """–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ N –¥–Ω—ñ–≤, –Ω–∞ SEND_HOUR_KYIV –∑–∞ –ö–∏—î–≤–æ–º."""
    run_at_utc = kyiv_midnight_plus(SEND_HOUR_KYIV, days_ahead=days_ahead)
    db_upsert(user_id, series_key, next_index, run_at_utc)

async def run_due_jobs():
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫—Ä–æ–Ω–æ–º –∞–±–æ –≤—Ä—É—á–Ω—É: –Ω–∞–¥—Å–∏–ª–∞—î –≤—Å–µ, —â–æ ¬´–ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–ª–æ—Å—å¬ª."""
    now = datetime.now(timezone.utc)
    for user_id, series_key, idx in db_due(now):
        videos = SERIES.get(series_key, [])
        if 0 <= idx < len(videos):
            # —à–ª–µ–º–æ —á–µ—Ä–≥–æ–≤–µ –≤—ñ–¥–µ–æ
            await send_video(user_id, videos[idx])
            # –ø–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ, —è–∫—â–æ —î
            if idx + 1 < len(videos):
                # –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ (—Ç–æ–±—Ç–æ +1 –¥–µ–Ω—å)
                await schedule_next(user_id, series_key, idx + 1, days_ahead=1)
            else:
                # —Å–µ—Ä—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                db_delete(user_id, series_key)
        else:
            # –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å ‚Äî –ø—Ä–∏–±–µ—Ä–µ–º–æ –∑–∞–ø–∏—Å
            db_delete(user_id, series_key)

# ========== –•–ï–ù–î–õ–ï–†–ò –ë–û–¢–ê ==========
@dp.message(CommandStart(deep_link=True))
async def start_with_key(message: Message):
    parts = message.text.split(maxsplit=1)
    key = parts[1].strip() if len(parts) > 1 else SERIES_KEY_DEFAULT
    series_key = key if key in SERIES else SERIES_KEY_DEFAULT

    await message.answer(WELCOME_TEXT)
    # –î–µ–Ω—å 1 ‚Äî –æ–¥—Ä–∞–∑—É
    await send_video(message.chat.id, SERIES[series_key][0])

    # –î–µ–Ω—å 2 –æ 10:00 –∑–∞ –ö–∏—î–≤–æ–º
    if len(SERIES[series_key]) > 1:
        await schedule_next(message.chat.id, series_key, next_index=1, days_ahead=1)
    # –î–µ–Ω—å 3 –æ 10:00 –∑–∞ –ö–∏—î–≤–æ–º
    if len(SERIES[series_key]) > 2:
        # –ó–∞–ø–∏—à–µ–º–æ –æ–¥—Ä–∞–∑—É "—á–µ—Ä–µ–∑ 2 –¥–Ω—ñ" —è–∫ next_index=2,
        # –∞–ª–µ –∑–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É: –º–∏ –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ "due" –ø–æ –ø–æ—Ä—è–¥–∫—É,
        # —Ç–æ–º—É –¥–µ–Ω—å 2 –ø—ñ–¥–µ –ø–µ—Ä—à–∏–º, –ø–æ—Ç—ñ–º –ø–µ—Ä–µ–∑–∞–ø–ª–∞–Ω—É—î—Ç—å—Å—è –¥–µ–Ω—å 3 ‚Äî —Ü–µ —Ç–µ–∂ –æ–∫.
        pass  # –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ç—É—Ç ‚Äî –∞–ª–≥–æ—Ä–∏—Ç–º —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø—ñ—Å–ª—è –¥–Ω—è 2

@dp.message(CommandStart())
async def start_plain(message: Message):
    series_key = SERIES_KEY_DEFAULT
    await message.answer(WELCOME_TEXT)
    await send_video(message.chat.id, SERIES[series_key][0])
    if len(SERIES[series_key]) > 1:
        await schedule_next(message.chat.id, series_key, next_index=1, days_ahead=1)

@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("–ù–∞—Ç–∏—Å–Ω–∏ /start ‚Äî –Ω–∞–¥—ñ–π–¥–µ –≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä—à–µ –≤—ñ–¥–µ–æ. –ù–∞—Å—Ç—É–ø–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –ø—Ä–∏–π–¥—É—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –¥–Ω—è–º–∏ –æ 10:00 –∑–∞ –ö–∏—î–≤–æ–º üôÇ")

# –ó—Ä—É—á–Ω–æ: —è–∫—â–æ –Ω–∞–¥—Å–∏–ª–∞—î—à –±–æ—Ç—É –≤—ñ–¥–µ–æ ‚Äî –≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î file_id (—â–æ–± –Ω–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ —Å–µ—Ä—ñ—é)
@dp.message(F.video)
async def give_file_id(message: Message):
    await message.answer(f"`{message.video.file_id}`", parse_mode="Markdown")

# ========== WEBHOOK-–°–ï–†–í–ï–† ==========
async def on_startup(app: web.Application):
    if not PUBLIC_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ PUBLIC_URL –∞–±–æ RENDER_EXTERNAL_URL (Environment Variable).")
    webhook_url = PUBLIC_URL + "/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook set to: {webhook_url}")

async def on_shutdown(app: web.Application):
    await bot.delete_webhook(drop_pending_updates=True)

async def handle_webhook(request: web.Request):
    # Telegram —à–ª–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—é–¥–∏ (POST /webhook)
    data = await request.text()
    await dp.feed_webhook_update(bot, data)
    return web.Response()

async def handle_cron(request: web.Request):
    # –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è ¬´–±—É–¥–∏–ª—å–Ω–∏–∫–∞¬ª (—â–æ–± –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Å–µ—Ä–≤—ñ—Å –∑–∞—Å–∏–Ω–∞—î)
    # –í–∏–∫–ª–∏—á —Ü–µ–π URL —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å ~10:00 –∑–∞ –ö–∏—î–≤–æ–º (—á–µ—Ä–µ–∑ –±—É–¥—å-—è–∫–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∫—Ä–æ–Ω-—Å–µ—Ä–≤—ñ—Å).
    await run_due_jobs()
    return web.Response(text="ok")

async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ (Environment Variable)")
    db_init()

    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    app.router.add_post("/webhook", handle_webhook)
    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç /cron ‚Äî –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Å–Ω—É —Å–µ—Ä–≤—ñ—Å—É
    app.router.add_get("/cron", handle_cron)

    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", "10000"))
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    logging.info(f"Server started on port {port}")

    # —Ç—Ä–∏–º–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∂–∏–≤–∏–º
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
